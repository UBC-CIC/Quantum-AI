openapi: 3.0.0
servers: []
info:
  title: Quantum AI API
  description: This API intended to deploy on AWS API Gateway
  version: "1.0.0"
tags:
  - name: User
    description: endpoints accessible by all users
  - name: Admin
    description: endpoints accessible by admins
x-amazon-apigateway-request-validators:
  all:
    validateRequestParameters: true
    validateRequestBody: true
  params-only:
    validateRequestParameters": true
    validateRequestBody": false
x-amazon-apigateway-request-validator: params-only
x-amazon-apigateway-gateway-responses:
  UNAUTHORIZED:
    statusCode: "401"
    responseParameters:
      gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
      gatewayresponse.header.Access-Control-Allow-Methods: "'*'"
      gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
    responseTemplates:
      application/json: |
        {"message":$context.error.messageString}
x-common-options: &commonOptions
  options:
    summary: CORS support
    description: |
      Enable CORS by returning correct headers
    responses:
      200:
        $ref: "#/components/responses/Success"
    x-amazon-apigateway-integration:
      type: mock
      requestTemplates:
        application/json: |
          {
            "statusCode" : 200
          }
      responses:
        default:
          statusCode: "200"
          responseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'*'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
          responseTemplates:
            application/json: |
              {}
paths:
  /user/text_generation:
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      responses:
        200:
          $ref: "#/components/responses/Success"
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: |
                {}
    post:
      tags:
        - User
      summary: Generate a response from the LLM
      operationId: user_text_generation_POST
      parameters:
        - in: query
          name: topic
          required: true
          description: ID of the topic
          schema:
            type: string
        - in: query
          name: session_id
          required: true
          description: ID of the session since multiple sessions can exist within a table
          schema:
            type: string
        # - in: query
        #   name: module_id
        #   required: true
        #   description: ID of the module used to find the module name which becomes the conversation's label
        #   schema:
        #     type: string
        - in: query
          name: session_name
          required: false
          description: Name of the session passed from the front-end after it has been created by the LLM
          schema:
            type: string
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                message_content:
                  type: string
                  description: Content of the user's message
      responses:
        "200":
          description: Response with generated array and input value
          content:
            application/json:
              schema:
                type: object
                properties:
                  session_name:
                    type: string
                    description: Name of the session which becomes the conversation's label
                  llm_output:
                    type: string
                    description: Response generated by the LLM
                  # llm_verdict:
                  #   type: string
                  #   description: Judgement of the LLM whether the user has achieved mastery over the module
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "429":
          description: Too Many Requests
        "500":
          description: Internal Server Error
      security:
        - userAuthorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${TextGenLambdaDockerFunc.Arn}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
  /user/create_user:
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      responses:
        200:
          $ref: "#/components/responses/Success"
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: |
                {}
    post:
      tags:
        - User
      summary: Create a user
      operationId: user_create_user_POST
      parameters:
        - in: query
          name: user_email
          required: false
          description: email of the user
          schema:
            type: string
        - in: query
          name: username
          required: false
          description: username of the user
          schema:
            type: string
        - in: query
          name: first_name
          required: false
          description: first name of the user
          schema:
            type: string
        - in: query
          name: last_name
          required: false
          description: last name of the user
          schema:
            type: string
        - in: query
          name: preferred_name
          required: false
          description: preferred name of the user
          schema:
            type: string
      responses:
        "200":
          description: User Created
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "429":
          description: Too Many Requests
        "500":
          description: Internal Server Error
      security:
        - userAuthorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${userFunction.Arn}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
  /user/get_user_roles:
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      responses:
        200:
          $ref: "#/components/responses/Success"
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: |
                {}
    get:
      tags:
        - User
      summary: Get the list of available regions
      operationId: user_get_user_roles_GET
      parameters:
        - in: query
          name: user_email
          required: false
          description: email of the user
          schema:
            type: string
      responses:
        "200":
          description: Roles Available
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "429":
          description: Too Many Requests
        "500":
          description: Internal Server Error
      security:
        - userAuthorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${userFunction.Arn}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
  /user/get_name:
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      responses:
        200:
          $ref: "#/components/responses/Success"
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: |
                {}
    get:
      tags:
        - User
      summary: Get the list of available regions
      operationId: user_get_name_GET
      parameters:
        - in: query
          name: user_email
          required: false
          description: email of the user
          schema:
            type: string
      responses:
        "200":
          description: Roles Available
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "429":
          description: Too Many Requests
        "500":
          description: Internal Server Error
      security:
        - userAuthorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${userFunction.Arn}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
  /user/topics:
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      responses:
        200:
          $ref: "#/components/responses/Success"
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: |
                {}
    get:
      tags:
        - User
      summary: Get all topics
      operationId: user_get_topics_GET
      # parameters:
        # - in: query
        #   name: email
        #   required: true
        #   description: Email of the user
        #   schema:
        #     type: string
      responses:
        "200":
          description: List of topics
        "400":
          description: Invalid value
        "401":
          description: Unauthorized
        "429":
          description: Too Many Requests
        "500":
          description: Internal Server Error
      security:
        - userAuthorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${userFunction.Arn}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
  /user/create_session:
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      responses:
        200:
          $ref: "#/components/responses/Success"
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: |
                {}
    post:
      tags:
        - User
      summary: Create a session for a user
      operationId: user_create_session_POST
      parameters:
        # - in: query
        #   name: module_id
        #   required: true
        #   description: ID of the module
        #   schema:
        #     type: string
        - in: query
          name: email
          required: true
          description: Email of the user
          schema:
            type: string
        - in: query
          name: topic_id
          required: true
          description: ID of the topic
          schema:
            type: string
        - in: query
          name: session_name
          required: true
          description: name of the session
          schema:
            type: string
      responses:
        "200":
          description: Session created
        "400":
          description: Invalid value
        "401":
          description: Unauthorized
        "429":
          description: Too Many Requests
        "500":
          description: Internal Server Error
      security:
        - userAuthorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${userFunction.Arn}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
  /user/update_session_name:
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      responses:
        200:
          $ref: "#/components/responses/Success"
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: |
                {}
    put:
      tags:
        - User
      summary: Update session name
      operationId: user_update_session_name_PUT
      parameters:
        - in: query
          name: session_id
          required: true
          description: ID of the session to update
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                session_name:
                  type: string
                  description: New name for the session
      responses:
        "200":
          description: Session name updated successfully
        "400":
          description: Bad Request
        "404":
          description: Session not found
        "500":
          description: Internal Server Error
      security:
        - userAuthorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${userFunction.Arn}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
  /user/delete_session:
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      responses:
        200:
          $ref: "#/components/responses/Success"
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: |
                {}
    delete:
      tags:
        - User
      summary: Delete a session for a user
      operationId: user_delete_session_DELETE
      parameters:
        - in: query
          name: session_id
          required: true
          description: ID of the session to delete
          schema:
            type: string
        - in: query
          name: email
          required: true
          description: Email of the user
          schema:
            type: string
        - in: query
          name: topic_id
          required: true
          description: ID of the topic
          schema:
            type: string
        # - in: query
        #   name: module_id
        #   required: true
        #   description: ID of the module
        #   schema:
        #     type: string
      responses:
        "200":
          description: Session deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  session_id:
                    type: string
                    description: ID of the deleted session
        "400":
          description: Invalid value or missing parameter
        "401":
          description: Unauthorized
        "429":
          description: Too Many Requests
        "500":
          description: Internal Server Error
      security:
        - userAuthorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${userFunction.Arn}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
  /user/create_message:
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      responses:
        200:
          $ref: "#/components/responses/Success"
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: |
                {}
    post:
      tags:
        - User
      summary: Create a message for a session
      operationId: user_create_message_POST
      parameters:
        - in: query
          name: session_id
          required: true
          description: ID of the session where the message is sent
          schema:
            type: string
        - in: query
          name: email
          required: true
          description: Email of the user sending the message
          schema:
            type: string
        - in: query
          name: topic_id
          required: true
          description: ID of the topic
          schema:
            type: string
        # - in: query
        #   name: module_id
        #   required: true
        #   description: ID of the module related to the session
        #   schema:
        #     type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                message_content:
                  type: string
                  description: Content of the message
      responses:
        "200":
          description: Message created
          content:
            application/json:
              schema:
                type: object
                properties:
                  session_id:
                    type: string
                    description: ID of the session where the message was created
                  message_content:
                    type: string
                    description: Content of the created message
        "400":
          description: Invalid value or missing parameter
        "401":
          description: Unauthorized
        "429":
          description: Too Many Requests
        "500":
          description: Internal Server Error
      security:
        - userAuthorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${userFunction.Arn}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
  /user/delete_last_message:
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      responses:
        200:
          $ref: "#/components/responses/Success"
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: |
                {}
    delete:
      tags:
        - User
      summary: Delete last exchange between user and AI in certain conversation in DynamoDB table
      operationId: user_delete_last_conversation_DELETE
      parameters:
        - in: query
          name: session_id
          required: true
          description: ID of the session since multiple sessions can exist within a table
          schema:
            type: string
      responses:
        "200":
          description: Last exchange with user and AI deleted succesfully
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "429":
          description: Too Many Requests
        "500":
          description: Internal Server Error
      security:
        - userAuthorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeleteLastMessage.Arn}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
  /user/create_ai_message:
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      responses:
        200:
          $ref: "#/components/responses/Success"
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: |
                {}
    post:
      tags:
        - User
      summary: Create an AI response message for a session
      operationId: user_create_ai_message_POST
      parameters:
        - in: query
          name: session_id
          required: true
          description: ID of the session where the message is sent
          schema:
            type: string
        - in: query
          name: email
          required: true
          description: Email of the user associated with the session
          schema:
            type: string
        - in: query
          name: topic_id
          required: true
          description: ID of the topic
          schema:
            type: string
        # - in: query
        #   name: module_id
        #   required: true
        #   description: ID of the module related to the session
        #   schema:
        #     type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                message_content:
                  type: string
                  description: Content of the AI's message
      responses:
        "200":
          description: AI message created
          content:
            application/json:
              schema:
                type: object
                properties:
                  session_id:
                    type: string
                    description: ID of the session where the message was created
                  message_content:
                    type: string
                    description: Content of the AI's created message
        "400":
          description: Invalid value or missing parameter
        "401":
          description: Unauthorized
        "429":
          description: Too Many Requests
        "500":
          description: Internal Server Error
      security:
        - userAuthorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${userFunction.Arn}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
  /user/get_messages:
    options:
      summary: CORS support
      description: Enable CORS by returning correct headers
      responses:
        200:
          $ref: "#/components/responses/Success"
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: |
                {}
    get:
      tags:
        - User
      summary: Get all messages in a session
      operationId: get_messages_GET
      parameters:
        - in: query
          name: session_id
          required: true
          schema:
            type: string
          description: The ID of the session
      responses:
        "200":
          description: List of messages in the session
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    message_id:
                      type: string
                    session_id:
                      type: string
                    user_sent:
                      type: boolean
                    message_content:
                      type: string
                    time_sent:
                      type: string
                      format: date-time
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "session_id query parameter is required"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Session not found"
        "500":
          description: Internal Server Error
      security:
        - userAuthorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${userFunction.Arn}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"

  # ADMIN ENDPOINTS

  /admin/generate_presigned_url:
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      responses:
        200:
          $ref: "#/components/responses/Success"
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: |
                {}
    get:
      tags:
        - Admin
      summary: Generate a presigned URL for uploading files
      operationId: admin_generate_presigned_url_GET_2
      parameters:
        - in: query
          name: topic_id
          required: true
          description: ID of the topic
          schema:
            type: string
        # - in: query
        #   name: module_id
        #   required: true
        #   description: ID of the module
        #   schema:
        #     type: string
        # - in: query
        #   name: module_name
        #   required: true
        #   description: Name of the module
        #   schema:
        #     type: string
        - in: query
          name: file_type
          required: true
          description: Type of file
          schema:
            type: string
        - in: query
          name: file_name
          required: true
          description: Name of the file
          schema:
            type: string
      responses:
        "200":
          description: Presigned URL generated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  presignedurl:
                    type: string
                    description: Presigned URL to upload document file to S3 Bucket
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "429":
          description: Too Many Requests
        "500":
          description: Internal Server Error
      security:
        - adminAuthorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GeneratePreSignedURLFunc.Arn}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
  /admin/get_all_files:
    options:
      summary: CORS support
      description: Enable CORS by returning correct headers
      responses:
        200:
          $ref: "#/components/responses/Success"
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: |
                {}
    get:
      tags:
        - Admin
      summary: Get a list of all the document files for a specific topic
      operationId: admin_get_all_files_GET
      parameters:
        - in: query
          name: topic_id
          required: true
          description: ID of the topic
          schema:
            type: string
        # - in: query
        #   name: module_id
        #   required: true
        #   description: ID of the module
        #   schema:
        #     type: string
        # - in: query
        #   name: module_name
        #   required: true
        #   description: Name of the module
        #   schema:
        #     type: string
      responses:
        "200":
          description: Recieved all the files for the topic successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  files:
                    type: array
                    description: A list of file names in the specified topic directory
                    items:
                      type: string
                      description: Name of the file
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "429":
          description: Too Many Requests
        "500":
          description: Internal Server Error
      security:
        - adminAuthorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetFilesFunction.Arn}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
  /admin/update_metadata:
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      responses:
        200:
          $ref: "#/components/responses/Success"
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: |
                {}
    put:
      tags:
        - Admin
      summary: Update the metadata of a file in a topic
      operationId: admin_update_metadata_PUT
      parameters:
        - in: query
          name: topic_id
          required: true
          description: ID of the topic containing the file
          schema:
            type: string
        - in: query
          name: filename
          required: true
          description: Name of the file to update
          schema:
            type: string
        - in: query
          name: filetype
          required: true
          description: Type of the file to update
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                metadata:
                  type: string
                  description: New metadata content for the file
      responses:
        "200":
          description: Metadata updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  document_id:
                    type: string
                    description: UUID of the file
                  topic_id:
                    type: string
                    description: UUID of the topic
                  filetype:
                    type: string
                    description: Type of the file
                  filepath:
                    type: string
                    description: File path
                  filename:
                    type: string
                    description: Name of the file
                  time_uploaded:
                    type: string
                    format: date-time
                    description: Time when the file was uploaded
                  metadata:
                    type: string
                    description: Updated metadata content
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message
        "404":
          description: File not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message
      security:
        - adminAuthorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${adminFunction.Arn}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
  /admin/delete_file:
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      responses:
        200:
          $ref: "#/components/responses/Success"
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: |
                {}
    delete:
      tags:
        - Admin
      summary: Delete certain file
      operationId: admin_delete_file_DELETE
      parameters:
        - in: query
          name: topic_id
          required: true
          description: ID of the topic
          schema:
            type: string
        # - in: query
        #   name: module_id
        #   required: true
        #   description: ID of the module
        #   schema:
        #     type: string
        # - in: query
        #   name: module_name
        #   required: true
        #   description: Name of the module
        #   schema:
        #     type: string
        - in: query
          name: file_type
          required: true
          description: Type of file (pdf or jpg)
          schema:
            type: string
        - in: query
          name: file_name
          required: true
          description: Name of the file
          schema:
            type: string
      responses:
        "200":
          description: File deleted successfully
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "429":
          description: Too Many Requests
        "500":
          description: Internal Server Error
      security:
        - adminAuthorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeleteFileFunc.Arn}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
  /admin/create_topic:
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      responses:
        200:
          $ref: "#/components/responses/Success"
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: |
                {}
    post:
      tags:
        - Admin
      summary: Create a new topic
      operationId: admin_create_topic_POST
      parameters:
        - in: query
          name: topic_name
          required: true
          schema:
            type: string
          description: Name of the topic
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                system_prompt:
                  type: string
                  description: System prompt for the topic
      responses:
        "200":
          description: Topic created successfully
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "429":
          description: Too Many Requests
        "500":
          description: Internal Server Error
      security:
        - adminAuthorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${adminFunction.Arn}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
  /admin/edit_topic:
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      responses:
        200:
          $ref: "#/components/responses/Success"
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: |
                {}
    put:
      tags:
        - Admin
      summary: Edit an existing topic
      operationId: admin_edit_topic_PUT
      parameters:
        - in: query
          name: topic_id
          required: true
          description: ID of the topic to be edited
          schema:
            type: string
        - in: query
          name: topic_name
          required: true
          description: Name of the topic to be edited
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                system_prompt:
                  type: string
                  description: System prompt for the topic
      responses:
        "200":
          description: Topic updated successfully
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "429":
          description: Too Many Requests
        "500":
          description: Internal Server Error
      security:
        - adminAuthorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${adminFunction.Arn}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
  /admin/delete_topic:
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      responses:
        200:
          $ref: "#/components/responses/Success"
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: |
                {}
    delete:
      tags:
        - Admin
      summary: Delete a topic
      operationId: admin_delete_topic_DELETE
      parameters:
        - in: query
          name: topic_id
          required: true
          description: The ID of the topic to delete
          schema:
            type: string
      responses:
        "200":
          description: Module deleted successfully
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "429":
          description: Too Many Requests
        "500":
          description: Internal Server Error
      security:
        - adminAuthorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${adminFunction.Arn}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
  /admin/delete_topic_s3:
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      responses:
        200:
          $ref: "#/components/responses/Success"
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: |
                {}
    delete:
      tags:
        - Topic
      summary: Delete certain topic
      operationId: admin_delete_topic_s3_DELETE
      parameters:
        - in: query
          name: topic_id
          required: true
          description: ID of the topic
          schema:
            type: string
        # - in: query
        #   name: module_id
        #   required: true
        #   description: ID of the module
        #   schema:
        #     type: string
        # - in: query
        #   name: module_name
        #   required: true
        #   description: Name of the module
        #   schema:
        #     type: string
      responses:
        "200":
          description: File deleted successfully
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "429":
          description: Too Many Requests
        "500":
          description: Internal Server Error
      security:
        - adminAuthorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeleteTopicFunc.Arn}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
  /admin/analytics:
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      responses:
        200:
          $ref: "#/components/responses/Success"
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: |
                {}
    get:
      tags:
        - Admin
      summary: Get analytics data for a specific topic
      operationId: admin_get_analytics_GET
      parameters:
        - in: query
          name: topic_id
          required: true
          description: ID of the topic for which analytics are requested
          schema:
            type: string
      responses:
        "200":
          description: Analytics data retrieved successfully
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "429":
          description: Too Many Requests
        "500":
          description: Internal Server Error
      security:
        - adminAuthorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${adminFunction.Arn}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"

components:
  securitySchemes:
    adminAuthorizer:
      type: "apiKey"
      name: "Authorization" # The header name where the token is provided
      in: "header"
      x-amazon-apigateway-authtype: "custom"
      x-amazon-apigateway-authorizer:
        type: token
        authorizerUri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${adminLambdaAuthorizer.Arn}/invocations"
        identitySource: method.request.header.Authorization
    userAuthorizer:
      type: "apiKey"
      name: "Authorization" # The header name where the token is provided
      in: "header"
      x-amazon-apigateway-authtype: "custom"
      x-amazon-apigateway-authorizer:
        type: token
        authorizerUri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${userLambdaAuthorizer.Arn}/invocations"
        identitySource: method.request.header.Authorization
    # instructorAuthorizer:
    #   type: "apiKey"
    #   name: "Authorization" # The header name where the token is provided
    #   in: "header"
    #   x-amazon-apigateway-authtype: "custom"
    #   x-amazon-apigateway-authorizer:
    #     type: token
    #     authorizerUri:
    #       Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${instructorLambdaAuthorizer.Arn}/invocations"
    #     identitySource: method.request.header.Authorization
  responses:
    Success:
      description: Request success
      headers:
        Access-Control-Allow-Origin:
          schema:
            type: string
        Access-Control-Allow-Methods:
          schema:
            type: string
        Access-Control-Allow-Headers:
          schema:
            type: string
      content: {}
